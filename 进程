******进程基础知识*******

1.进程标识符pid
    类型pid_t
    命令ps
    进程号是顺次向下使用
    getpid();
    getppid();
2.进程的产生
    fork():
    子进程结束后要结束进程，不然会接着fork（）。
    注意着理解关键字：duplicating，拷贝，克隆，一模一样
    fork后父子进程的区别：fork的返回值不一样，pid不同，ppid不同，未决信号和文件锁不继承，资源利用量清0.
    init进程：1号，是所有进程的祖先进程
    调度器的调度策略来决定哪个进程先运行，不要猜测父子进程哪个先运行。
    fork return value:On success, the PID of the child process is returned in the parent, and 0 is returned in the child.  On failure, -1 is returned in the  parent,  no
       child process is created, and errno is set appropriately.--------因为有全局变量errno，函数里可以使用函数perror();
     fflush()的重要性。
    vfork();//快要废弃了
    
3.进程的消亡及释放资源
    孤儿进程：如果父进程先退出,子进程还没退出那么子进程将被 托孤给init进程,这时子进程的父进程就是init进程(1号进程).
             init进程完成所有孤儿进程的状态收集工作。即每当出现一个孤儿进程的时候，内核就把孤 儿进程的父进程设置为init，而init进程会循环地wait()它的已经退出的子进程。
             这样，当一个孤儿进程凄凉地结束了其生命周期的时候，init进程就会代表党和政府出面处理它的一切善后工作。因此孤儿进程并不会有什么危害。
    僵尸进程：僵尸进程是当子进程比父进程先结束，而父进程又没有回收子进程，释放子进程占用的资源，此时子进程将成为一个僵尸进程。
             一个进程在调用exit命令结束自己的生命的时候，其实它并没有真正的被销毁， 而是留下一个称为僵尸进程（Zombie）的数据结构（系统调用exit，它的作用是 使进程退出，
             但也仅仅限于将一个正常的进程变成一个僵尸进程，并不能将其完全销毁）系统所能使用的进程号是有限的，如果大量的产生僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程.
             此即为僵尸进程的危害，应当避免。
    守护进程：
    wait();
    waitpid();
    waitid();
    wait3();
    wait4();
4.exec函数族
    execl();
    execlp();
    execle();
    execv();
    execvp();
    注意：fflush()的使用。
5.用户权限及组权限(u+s,g+s)
    u+s:当别的用户在调用当前可执行文件的时候，身份会切换到当前二进制文件的user身份执行。
    g+s:当别的用户在调用当前可执行文件的时候，身份会切换到当前二进制文件的同组user身份执行。
    getuid();
    geteuid();
    getgid();
    getegid();
    setuid();
    setgid();
    setreuid();
    setregid();
    seteuid();
    setegid();
6.解释器文件
    脚本文件
    标志：#！/bin/bash(解释器文件)
7.system();
    理解：fork+exec+wait封装
8.进程会计：统计进程所占资源量
    acct(const char *filename);//结束进程的相关信息放到file中去。
9.进程时间
    times();
10.守护进程
    会话 session,标识sid
    守护进程特点：PPID；1;PID,PGID,SID相同；TTY：？
    终端
    setsid();
    getpgrp();
    getpgid();
    setpgid();
    单实例守护进程：锁文件 /var/run/name.pid
    启动脚本文件：/etc/rc*
11.系统日志
    syslogd服务
    openlog();
    syslog();
    closelog();


-------------------------并发（信号、线程）------------------------
同步
异步
异步事件的处理：查询法，通知法

一.信号
1.信号的概念
    信号是软件中断。
    信号的响应依赖于中断。
    
2.signal();
   void signal(int signum,void (*func)(int))(int);
   信号会打断阻塞的系统调用。
3.信号的不可靠
    信号的行为不可靠，信号的执行现场由内核来布置
4.可重入函数
    为了解决信号不可靠
    所有的系统调用都是可重入的，一部分库函数也是可重入的，如：memcpy(Yes),localtime(NO),localtime_r(Yes);rand(NO),rand_r(Yes);
    尤其返回值是指针的要注意。
5.信号的响应过程
    内核为每个进程维护了两个位图，俩位图均为32位
    1.信号屏蔽字（mask）：表示当前信号的状态，一般情况下都是1.
    2.pending：记录当前进程收到哪些信号，初始值为0.
    信号从收到到响应有一个不可避免的延迟
    思考：如何忽略掉信号？
         标准信号为什么要丢失？
         标准信号的响应没有严格地顺序。
         不能从信号处理函数中随意的往外跳，（setjmp,longjmp）会错过把mask值改回到1这个过程，导致以后看不到此信号。（sigsetjmp,siglongjmp）可以实现更改mask值的操作。
6.信号常用函数
    kill();
    给一个进程发信号
    raise();
    给当前进程或线程发信号
    alarm();
    setitimer();
    例：使用单一计时器，利用alarm或setitimer构造一组函数，实现任意数量的计时器
    pause();
        不让cpu忙等，减少cpu使用率。
    abort();
    system();
        在信号参与的程序当中，要阻塞住一个信号，忽略掉两个信号。
    sleep();
        在某些平台下sleep是由alarm 和 pause封装的，不能用
        如果sleep是由nanosleep封装的，则没问题。
        nanosleep();
        usleep();
        select();
7.信号集
    信号集类型：sigset_t
       int sigemptyset(sigset_t *set);
       int sigfillset(sigset_t *set);
       int sigaddset(sigset_t *set, int signum);
       int sigdelset(sigset_t *set, int signum);
       int sigismember(const sigset_t *set, int signum);

8.信号屏蔽字（mask）/pending集的处理
    sigprocmask();
    sigpending();
9.扩展
    sigsuspend()；
    sigaction();    -> signal();(有很多设计上的缺陷)
    
10.实时信号
    标准信号会丢失；标准信号的响应没有顺序；其他的两者没啥区别；

--------总结---------
标准IO不能用在信号处理函数中，因为共用缓冲区，系统调用可以放心用（可重入函数），信号处理函数尽量小，这样发生重入的几率比较小。
























二.线程
1.线程的概念
    一个正在运行的函数
    posix线程是一套标准，而不是实现
    openmp线程
    线程标识：pthread_t
    pthread_equal();
    pthread_self();
2.线程的创建
    pthread_create();
    线程的调度取决于调度器策略
  线程的终止
    3种方式：
        1）线程从启动例程中返回，返回值就是线程的退出码
        2）线程可以被同一进程中的其他线程取消
        3）线程调用pthread_exit()函数，当前线程的结束。
    pthread_join() -->  wait();
  栈的清理//这两个成对出现，他是一个宏，只写一个会报语法错误；
    pthread_cleanup_push();
    pthread_cleanup_pop();
  线程的取消选项
    线程取消：pthread_cancel();
    取消有2种状态：允许和不允许
    允许取消又分为：异步cancel,推迟cancel（默认）->推迟至cancel点
    cancel点：POSIX定义的cancel点，都是可能引发阻塞的系统调用
    pthread_setcancelstate()：设置是否允许取消
    pthread_setcanceltype():设置取消方式
    pthread_testcancel():本函数什么都不做，就是一个取消点
  线程分离
    pthread_detach();---->已经被detach的函数不能被join（终止）
3.线程同步
    互斥量：pthread_mutex_t;
           pthread_mutex_init();
           pthread_mutex_destroy();
           pthread_mutex_lock();
           pthread_mutex_trylock();
           pthread_mutex_unlock();
    
4.线程属性
  线程同步的属性
5.重入
  线程与信号
  线程与fork
6.


-----------shell记录---------
twenty@twenty-virtual-machine:~$ echo 1 > /tmp/out
twenty@twenty-virtual-machine:~$ cat /tmp/out
1
























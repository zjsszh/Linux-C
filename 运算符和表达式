1.运算符的特殊运算 逻辑运算符（&&，||)的短路特性，当&&运算符计算出0后便不在进行&&后面的计算
2.逗号运算符，表达式的值就是逗号最后一项的值。
3.ll的用法：#define SEC_YEAR (60LL*60LL*24LL*365LL)
4.scanf在循环中使用比较危险，要注意能否接收到正常有效的内容，可以使用其返回值。
        while(1)
     13         {
     14                 ret=scanf("%d",&i);
     15                 if(ret != 1)
     16                 {
     17                         printf("enter error!\n");
     18                         break;
     19                 }
     20                 printf("i=%d\n",i);
     21         }
    scanf中：%s的使用是比较危险的，因为不知道存储空间的大小。
5.抑制符
  scanf("%d",&i);
  scanf("%*c%c",&ch);
  *c来吐掉一个字符。
6.gets（）非常危险，出现越界不报错，可以用fget,getline来代替
  No check for buffer
       overrun is performed (see BUGS below).
7.使用switch case时,一定要加default，可以用来包含出错的情况。
        case后面一定是常量或常量表达式，不能是关系表达式（如：score/10,不行)
8.if-goto:（可以构成循环，但慎重使用：goto实现的是无条件的跳转，且不能跨函数跳转）
9.辅助控制break与continue：break跳出的是本层循环，continue跳出的是本次循环。
10.static int a[M],static进行初始化之后，a数组中的值均为0；
11.求一个数组元素的个数：
       sizeof(a)/sizeof(*a)<====>sizeof(a)/sizeof(a[0])
12.指针与一维数组的关系：
    int *p=(int [3]){1,2,3};
    int i;
      for(i=0;i<3;i++)
      {
          printf("%p-->%d\n",&p[i],p[i]);
      }
    twenty@twenty-virtual-machine:~/test/test1$ ./lianxi
    0x7ffefe7054dc-->1
    0x7ffefe7054e0-->2
    0x7ffefe7054e4-->3
 
 13.指针数组：类型名 * 数组名[数组长度]
            如：int * p[4]
    数组指针：【存储类型】 数据类型 （*指针名） 【下标】 =值
            如：int （*p)[3];--> type name;-->int [3] *p;
 14.sizeof()与strlen()的关系：
      char str[]="hello";
      char *str1="hello";
      printf("%d %d\n",sizeof(str),strlen(str));
      printf("%d %d\n",sizeof(str1),strlen(str1))
      结果为6   5.
            8   5
 15. 字符指针与字符数组：  
     char str[]="hello";
    (F)str="world";
    (T)strcpy(str,"world");
       char *str="hello";
    (F)strcpy(str,"world");
    (T)str="world";
 16. const的用法：
      int i=1;
      int j=100;
      int *const p = &i;
      *p=10;
      printf("*p=%d\n",*p);
      printf("i=%d\n",i);
      输出：10     10
 17. 函数：
      twenty@twenty-virtual-machine:~/test/function$ ./fun
      hello
      twenty@twenty-virtual-machine:~/test/function$ echo $?
      0
      echo $?是上一条执行命令的返回值。
      ------------------------------------
      printf("hello!\n");
      return 0
      返回值为0；
      printf("hello!\n");
      返回值为7.
      一个进程的返回值（返回状态）是给父进程看的。
18. 函数与一维数组：
   void print_arr(int *p,int n)
   //void print_arr(int p[],int n)
   ----------------------形参的形式，*p相当于p[]-------------------
   {
       int i;
       printf("%s:%d\n",__FUNCTION__,sizeof(p));
  
      for(i=0;i<n;i++)
          //printf("%d ",p[i]);
          printf("%d ",*(p+i));
          ---------p[i]相当于*(p+i)----------
      printf("\n");
      return ;
  }
19.函数与二维数组：
  6 //void print_arr1(int p[][N],int m,int n)  
  7 void print_arr1(int (*p)[N],int m,int n)   //int (*p)[N]为数组指针。
  -----------上面俩作为形参可以替换----------
  8 {
  9     int i,j;
 10     printf("sizeof(p)=%d\n",sizeof(p));
 11 
 12     for(i=0;i<m;i++)
 13     {
 14         for(j=0;j<n;j++)
 15            // printf("%4d ",p[i][j]);
 16             printf("%4d ",*(*(p+i)+j));
        -----------上面俩可以进行替换---------------
 17         printf("\n");
 18 
 19     }
 20 
 21 }
 20.二维数组a[M][N]如果想作为一个大数组(一维数组）用，传参的话，用&a[0][0]或者*a.
    二维数组a[M][N]如果想作为行指针传参用的话，用a。
 21.指针函数：返回值为指针类型的函数
        返回值 * 函数名（形参）；
        如：int * fun(int);
 22.函数指针：
        类型 （*指针名） （形参）
        如：int （*P）（int）；
 23.
  struct simp_st
  {
      int i;
      char ch;
      float f;
  }__attribute__((packed));
  ------加att...结果为（2），不加为（1）-------
  //__attribute__((packed));
 int main()
   {
     struct simp_st a;
     struct simp_st *p=&a;
  
     printf("sizeof(point)=%d\n",sizeof(p));
    printf("sizeof(struct)=%d\n",sizeof(a));
    exit(0);
    }
    
 （1）sizeof(point)=8
      sizeof(struct)=12 
 （2）sizeof(point)=8
      sizeof(struct)=9
24.函数传参时传递结构体变量费内存，改用传指针
25.free后进行空指针赋值，防止野指针污染存储内存，
     free(p);
     p=NULL;
26.typedefy int ARR[6];   --->   int [6]->ARR;
   ARR a;----> int a[6];
27.指针常量与常量指针
指针常量：
本质上一个常量，指针用来说明常量的类型，表示该常量是一个指针类型的常量。在指针常量中，指针自身的值是一个常量，不可改变，始终指向同一个地址。在定义的同时必须初始化。用法如下：
int a = 10, b = 20;
int * const p = &a;
*p = 30; // p指向的地址是一定的，但其内容可以修改
常量指针：
常量指针本质上是一个指针，常量表示指针指向的内容，说明该指针指向一个“常量”。在常量指针中，指针指向的内容是不可改变的，指针看起来好像指向了一个常量。用法如下：
int a = 10, b = 20;
const int *p = &a;
p = &b; // 指针可以指向其他地址，但是内容不可以改变

    

1.运算符的特殊运算 逻辑运算符（&&，||)的短路特性，当&&运算符计算出0后便不在进行&&后面的计算
2.逗号运算符，表达式的值就是逗号最后一项的值。
3.ll的用法：#define SEC_YEAR (60LL*60LL*24LL*365LL)
4.scanf在循环中使用比较危险，要注意能否接收到正常有效的内容，可以使用其返回值。
        while(1)
     13         {
     14                 ret=scanf("%d",&i);
     15                 if(ret != 1)
     16                 {
     17                         printf("enter error!\n");
     18                         break;
     19                 }
     20                 printf("i=%d\n",i);
     21         }
    scanf中：%s的使用是比较危险的，因为不知道存储空间的大小。
5.抑制符
  scanf("%d",&i);
  scanf("%*c%c",&ch);
  *c来吐掉一个字符。
6.gets（）非常危险，出现越界不报错，可以用fget,getline来代替
  No check for buffer
       overrun is performed (see BUGS below).
7.使用switch case时,一定要加default，可以用来包含出错的情况。
        case后面一定是常量或常量表达式，不能是关系表达式（如：score/10,不行)
8.if-goto:（可以构成循环，但慎重使用：goto实现的是无条件的跳转，且不能跨函数跳转）
9.辅助控制break与continue：break跳出的是本层循环，continue跳出的是本次循环。
10.static int a[M],static进行初始化之后，a数组中的值均为0；
11.求一个数组元素的个数：
       sizeof(a)/sizeof(*a)<====>sizeof(a)/sizeof(a[0])
12.指针与一维数组的关系：
    int *p=(int [3]){1,2,3};
    int i;
      for(i=0;i<3;i++)
      {
          printf("%p-->%d\n",&p[i],p[i]);
      }
    twenty@twenty-virtual-machine:~/test/test1$ ./lianxi
    0x7ffefe7054dc-->1
    0x7ffefe7054e0-->2
    0x7ffefe7054e4-->3
 
 13.数组指针：【存储类型】 数据类型 （*指针名） 【下标】 =值
    如：int （*p)[3];--> type name;-->int [3] *p;
 14.sizeof()与strlen()的关系：
      char str[]="hello";
      char *str1="hello";
      printf("%d %d\n",sizeof(str),strlen(str));
      printf("%d %d\n",sizeof(str1),strlen(str1))
      结果为6   5.
            8   5
 15. 字符指针与字符数组：  
     char str[]="hello";
    (F)str="world";
    (T)strcpy(str,"world");
       char *str="hello";
    (F)strcpy(str,"world");
    (T)str="world";
 16. const的用法：
      int i=1;
      int j=100;
      int *const p = &i;
      *p=10;
      printf("*p=%d\n",*p);
      printf("i=%d\n",i);
      输出：10     10
 17.  函数：
      twenty@twenty-virtual-machine:~/test/function$ ./fun
      hello
      twenty@twenty-virtual-machine:~/test/function$ echo $?
      0
      echo $?是上一条执行命令的返回值。
      ------------------------------------
      printf("hello!\n");
      return 0
      返回值为0；
      printf("hello!\n");
      返回值为7.


    

I/O
stdio 标准IO
sysio 系统调用IO（文件IO）
stdio:FILE类型
标准io:
1.fopen();



fclose();
fgetc();
fputc();
fgets();
fputs();
fread();//数据块的操作
fwrite();

printf();
scanf();
文件位置指针相关
fseek();
ftell();
rewind();

fflush();

getline();
临时文件：1.如何不冲突  2.及时销毁
创建临时文件的函数：        
        tmpnam
        tmpfile

文件io/系统调用io:
fd是文件IO中贯穿始终的类型
文件描述符的概念（整型数，数组的下标，文件描述符优先使用当前可用范围最小的）
文件IO的操作：open,close,read,write,lseek
文件IO与标准IO的区别：
        文件IO响应速度快，标准IO吞吐量大
        标准IO和文件IO不能混用。
        转换：fileno，fdopen
IO的效率问题
        习题
文件共享：多个任务共同操作一个文件或者协同完成任务
        面试：写程序删除一个文件的第10行。
        1->open r ->fd1 ->lseek 11
        2->open r+ ->fd2 ->lseek 10
        while()
        {
         1->fd1->read
         2->fd2->write
        }
        补充函数：truncate/ftruncate
        
原子操作:不可分割的操作
        作用：解决竞争和冲突
        如：tmpnam不原子
程序中的重定向：dup,dup2（原子操作）
        I/O重定向使我们可以重新定义标准输出的位置。重定向标准输出到另一个文件而不是屏幕，我们使用“>”or“>>”操作符重定向到文件。
同步：sync,fsync,fdatasync
fcntl()：文件描述符所变的魔术几乎都来源于该函数 
ioctl()：设备相关的内容
/dev/fd/目录：虚目录，显示的是当前进程的文件描述符信息

重载：重载就是在一个类中，有相同的函数名称，但形参不同的函数
变参：printf的实现
--------------------------------------------------------------------------------------------
文件系统：
一、目录和文件
1.获取文件属性
        补充：cmd  --长格式    -短格式 如：ls -a   <==>    ls --all
        touch -- -a 或者 touch ./-a
        rm -- -a 或者 rm ./-a
        
        lseek(fd,5LL*1024LL*1024LL*1024LL-1LL,SEEK_SET);//注意：数值一定要带单位！

2.文件访问权限
        st_mode是一个16位的位图，用于表示文件类型，文件访问权限，及特殊权限位
3.umask

4.文件权限的更改chmod,fchmod
5.粘住位
6.文件系统：FAT,UFS
7.硬链接，符号链接
8.utime
9.目录的创建和销毁
10.更改当前工作路径
11.分析目录/读取目录内容

二、系统数据文件和信息

三、进程环境













